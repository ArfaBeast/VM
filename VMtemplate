# # create the resource group  VM

# resource "azurerm_resource_group" "RG" {
#   name     = "${var.server_type}-${var.env}-resource-group"
#   location = var.location
# }

# #  calling the subnet
# data "azurerm_subnet" "subnet" {
#   name                 = var.subnet
#   virtual_network_name = "VNet-App-NP"
#   resource_group_name  = "resource_group-App-NP"

# }
# # create the publicIp address

# resource "azurerm_public_ip" "public_ip" {
#   count               = var.vmcount
#   name                = "${var.server_type}-${var.env}-PIP-${count.index + 1}"
#   location            = azurerm_resource_group.RG.location
#   resource_group_name = azurerm_resource_group.RG.name
#   allocation_method   = "Dynamic"
# }

# # create the NIC

# resource "azurerm_network_interface" "NIC" {
#   count               = var.vmcount
#   name                = "${var.server_type}-${var.env}-NIC-${count.index + 1}"
#   location            = azurerm_resource_group.RG.location
#   resource_group_name = azurerm_resource_group.RG.name

#   ip_configuration {
#     name                          = "${var.server_type}-${var.env}-IPConfig-${count.index + 1}"
#     subnet_id                     = data.azurerm_subnet.subnet.id
#     private_ip_address_allocation = "Dynamic"
#     public_ip_address_id          = azurerm_public_ip.public_ip[count.index].id
#   }
# }
# // create a new VM 

# resource "azurerm_virtual_machine" "main" {
#   count                 = var.vmcount
#   name                  = "${var.server_type}-${var.env}-VM-${count.index + 1}"
#   location              = azurerm_resource_group.RG.location
#   resource_group_name   = azurerm_resource_group.RG.name
#   network_interface_ids = [element(azurerm_network_interface.NIC.*.id, count.index)]
#   vm_size               = var.size

#   storage_image_reference {
#     publisher = "Canonical"
#     offer     = "0001-com-ubuntu-server-focal"
#     sku       = "20_04-lts-gen2"
#     version   = "latest"
#   }

#   storage_os_disk {
#     name              = "${var.server_type}-${var.env}-VM-${count.index + 1}-OSDisk"
#     caching           = "ReadWrite"
#     create_option     = "FromImage"
#     managed_disk_type = "Standard_LRS"
#   }
#   os_profile {
#     computer_name  = "${var.server_type}-${var.env}-VM-OSDisk-${count.index + 1}"
#     admin_username = var.username
#     admin_password = var.password
#   }
#   os_profile_linux_config {
#     disable_password_authentication = false
#   }
#   tags = {
#     environment = "Non-production"
#     testing     = "true"
#   }
# }
# # add data disk

# # resource "azurerm_managed_disk" "data_disk" {
# #   count                = var.vmcount
# #   name                 = "datadisk-${var.server_type}-${var.env}-${count.index + 1}"
# #   location             = azurerm_resource_group.RG.location
# #   resource_group_name  = azurerm_resource_group.RG.name
# #   storage_account_type = "Standard_LRS"
# #   create_option        = "Empty"
# #   disk_size_gb         = 16
# # }

# # install nginx and ansible on the virtual machine using file URIs

# resource "azurerm_virtual_machine_extension" "nginx_ansible" {
#   count                      = var.vmcount
#   name                       = "nginx-ansible-${count.index + 1}"
#   virtual_machine_id         = element(azurerm_virtual_machine.main.*.id, count.index)
#   publisher                  = "Microsoft.Azure.Extensions"
#   type                       = "CustomScript"
#   type_handler_version       = "2.1"
#   auto_upgrade_minor_version = true

#   settings = <<SETTINGS
#     {
#         "fileUris": ["https://raw.githubusercontent.com/mustafamj9/artifacts/main/nginx.sh"]
#     }
# SETTINGS

#   protected_settings = <<PROTECTED_SETTINGS
#     {
#             "commandToExecute": "./nginx.sh"
#     }
# PROTECTED_SETTINGS
# }


